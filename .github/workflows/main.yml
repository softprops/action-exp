name: Main

on: push

jobs:
  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Rust
        uses: hecrj/setup-rust-action@master
      - uses: actions/checkout@master
      - run: rustup component add rustfmt
      - run: cargo fmt --all -- --check

  clippy:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Rust
        uses: hecrj/setup-rust-action@master
      - uses: actions/checkout@master
      - run: rustup component add clippy
      - run: cargo clippy --all-targets --all-features -- -D clippy::all

  cargo_check:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Rust
        uses: hecrj/setup-rust-action@master
      - uses: actions/checkout@master
      - run: cargo check --all

  test:
    needs: [rustfmt, clippy, cargo_check]
    strategy:
      matrix:
        rust: [stable]
        os: [ubuntu-latest] #, windows-latest, macOS-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Setup Rust
      uses: hecrj/setup-rust-action@master
      with:
        rust-version: ${{ matrix.rust }}
    - name: Checkout
      uses: actions/checkout@v1
    - name: Test
      run: cargo test --verbose

  release:
    needs: [test]
    strategy:
      matrix:
        rust: [stable]
        os: [ubuntu-latest, windows-latest, macOS-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Setup Rust
      uses: hecrj/setup-rust-action@master
      with:
        rust-version: ${{ matrix.rust }}
    - name: Checkout
      uses: actions/checkout@v1
    - name: Show Rustup
      run: rustup show
    - name: Build
      run: cargo build --release
    - name: Debug
      run: ls -al target/release
    #- name: Install Cross
    #  run: |
    #    cargo install --git https://github.com/rust-embedded/cross
    #    export PATH="$HOME/.cargo/bin:$PATH"
    #- name: Package Linux
    #  if: matrix.os == 'ubuntu-latest'
      #run: $HOME/.cargo/bin/cross build --target x86_64-unknown-linux-musl --release
    #  run: cargo build --release
    #- name: Package Windows
    #  if: matrix.os == 'windows-latest'
      #run: $HOME/.cargo/bin/cross build --target x86_64-pc-windows-msvc --release
    #  run: cargo build --release
    #- name: Package OSX
    #  if: matrix.os == 'macOS-latest'
      #run: $HOME/.cargo/bin/cross build --target x86_64-apple-darwin --release
    #  run: cargo build --release
    - name: Package
      run: echo "release for ${{ matrix.os }}"