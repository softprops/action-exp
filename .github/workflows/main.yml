name: Main

on: push

jobs:
  # rustfmt:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Setup Rust
  #       uses: hecrj/setup-rust-action@master
  #     - uses: actions/checkout@master
  #     - run: rustup component add rustfmt
  #     - run: cargo fmt --all -- --check

  # clippy:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Setup Rust
  #       uses: hecrj/setup-rust-action@master
  #     - uses: actions/checkout@master
  #     - run: rustup component add clippy
  #     - run: cargo clippy --all-targets --all-features -- -D clippy::all

  # cargo_check:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Setup Rust
  #       uses: hecrj/setup-rust-action@master
  #     - uses: actions/checkout@master
  #     - run: cargo check --all

  # test:
  #   needs: [rustfmt, clippy, cargo_check]
  #   strategy:
  #     matrix:
  #       rust: [stable]
  #       os: [ubuntu-latest] #, windows-latest, macOS-latest]
  #   runs-on: ${{ matrix.os }}

  #   steps:
  #   - name: Setup Rust
  #     uses: hecrj/setup-rust-action@master
  #     with:
  #       rust-version: ${{ matrix.rust }}
  #   - name: Checkout
  #     uses: actions/checkout@v1
  #   - name: Test
  #     run: cargo test --verbose

  release:
    #needs: [test]
    strategy:
      matrix:
        # The docs seem to suggest that we can have a matrix with just an
        # include directive, but it result in a "matrix must define at least
        # one vector" error in the CI system.
        os: [ubuntu-latest, macOS-latest] #, windows-latest]
        include:
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
            bin: action-exp
            name: action-exp-Linux-x86_64.tar.gz
          # - os: windows-latest
          #   rust: stable
          #   target: x86_64-pc-windows-msvc
          #   bin: action-exp.exe
          #   name: action-exp-Windows-x86_64.zip
          - os: macOS-latest
            rust: stable
            target: x86_64-apple-darwin
            bin: action-exp
            name: action-exp-Darwin-x86_64.tar.gz
    runs-on: ${{ matrix.os }}
    steps:
    - name: Setup Rust
      uses: hecrj/setup-rust-action@master
      with:
        rust-version: ${{ matrix.rust }}
    - name: Configure Rustup
      run: rustup target add ${{ matrix.target }}
    #- name: Show Rustup
    #  run: rustup show
    - name: Checkout
      uses: actions/checkout@v1
    - name: Build
      run: cargo build --release --target ${{ matrix.target }}
    - name: Package
      shell: bash
      run: |
        ls -al target/${{ matrix.target }}/release/${{ matrix.bin }}
        strip target/${{ matrix.target }}/release/${{ matrix.bin }}
        if [[ "${{matrix.os}}" == "windows-latest" ]]
        then
          7z a ${{matrix.name}} target/${{ matrix.target }}/release/${{ matrix.bin }}
        else
          cd target/${{ matrix.target }}/release && tar czvf ../../../${{matrix.name}} ${{ matrix.bin }} && cd -
        fi
        ls -al ${{matrix.name}}
    - name: Publish
      uses: softprops/action-gh-release@cross-platform
      if: startsWith(github.ref, 'refs/tags/')
      with:
          files: 'action-exp*'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}