name: Main

on: push

jobs:
  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Rust
        uses: hecrj/setup-rust-action@master
      - uses: actions/checkout@master
      - run: rustup component add rustfmt
      - run: cargo fmt --all -- --check

  clippy:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Rust
        uses: hecrj/setup-rust-action@master
      - uses: actions/checkout@master
      - run: rustup component add clippy
      - run: cargo clippy --all-targets --all-features -- -D clippy::all

  cargo_check:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Rust
        uses: hecrj/setup-rust-action@master
      - uses: actions/checkout@master
      - run: cargo check --all

  test:
    needs: [rustfmt, clippy, cargo_check]
    strategy:
      matrix:
        rust: [stable]
        os: [ubuntu-latest] #, windows-latest, macOS-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Setup Rust
      uses: hecrj/setup-rust-action@master
      with:
        rust-version: ${{ matrix.rust }}
    - name: Checkout
      uses: actions/checkout@v1
    - name: Test
      run: cargo test --verbose

  release:
    needs: [test]
    strategy:
      matrix:
        # The docs seem to suggest that we can have a matrix with just an
        # include directive, but it result in a "matrix must define at least
        # one vector" error in the CI system.
        os: [ubuntu-latest, windows-latest, macOS-latest]
        include:
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
          - os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
          - os: macOS-latest
            rust: stable
            target: x86_64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
    - name: Setup Rust
      uses: hecrj/setup-rust-action@master
      with:
        rust-version: ${{ matrix.rust }}
    - name: Configure Rustup
      run: rustup target add ${{ matrix.target }}
    - name: Show Rustup
      run: rustup show
    - name: Checkout
      uses: actions/checkout@v1
    - name: Build
      run: cargo build --release --target ${{ matrix.target }}
    #- name: Install Cross
    #  run: |
    #    cargo install --git https://github.com/rust-embedded/cross
    #    export PATH="$HOME/.cargo/bin:$PATH"
    #- name: Package Linux
    #  if: matrix.os == 'ubuntu-latest'
      #run: $HOME/.cargo/bin/cross build --target x86_64-unknown-linux-musl --release
    #  run: cargo build --release
    #- name: Package Windows
    #  if: matrix.os == 'windows-latest'
      #run: $HOME/.cargo/bin/cross build --target x86_64-pc-windows-msvc --release
    #  run: cargo build --release
    #- name: Package OSX
    #  if: matrix.os == 'macOS-latest'
      #run: $HOME/.cargo/bin/cross build --target x86_64-apple-darwin --release
    #  run: cargo build --release
    - name: Package OSX
      if: matrix.os == 'macOS-latest'
      run: |
        echo packaging osx
        which tar || echo "no tar"
        tag=test
        bin=action-exp
        ls -alh target/${{ matrix.target }}/release
        name="$bin-$tag-Darwin-x86_64"
        src=$(pwd)
        mkdir $name
        strip target/${{ matrix.target }}/release/$bin
        cp target/${{ matrix.target }}/release/$bin $name/
        cd $name
        tar czvf $src/$name.tar.gz *
        cd $src
        rm -rf $name
        ls -alh $name.tar.gz
    - name: Package Windows
      if: matrix.os == 'windows-latest'
      run: |
        echo packaging windows
        ls -alh target/${{ matrix.target }}/release
        which tar || echo "no tar"
        tag=test
        bin=action-exp.exe
        name="$bin-$tag-Windows-x86_64"
        src=$(pwd)
        mkdir $name
        strip target/${{ matrix.target }}/release/$bin
        cp target/${{ matrix.target }}/release/$bin $name/
        cd $name
        tar czvf $src/$name.tar.gz *
        cd $src
        rm -rf $name
        ls -alh $name.tar.gz
    - name: Package Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        echo packaging linux
        ls -alh target/${{ matrix.target }}/release
        which tar || echo "no tar"
        tag=test
        bin=action-exp
        name="$bin-$tag-Darwin-x86_64"
        src=$(pwd)
        mkdir $name
        strip target/${{ matrix.target }}/release/$bin
        cp target/${{ matrix.target }}/release/$bin $name/
        cd $name
        tar czvf $src/$name.tar.gz *
        cd $src
        rm -rf $name
        ls -alh $name.tar.gz
    - name: Release
      uses: docker://softprops/action-gh-release
      if: startsWith(github.ref, 'refs/tags/')
      with:
          files: 'action-exp*.tar.gz'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}